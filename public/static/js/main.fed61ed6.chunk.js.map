{"version":3,"sources":["UpsertCard.js","Card.js","CreateCard.js","ActiveCards.js","Archivedcards.js","Allcards.js","Routes.js","App.js","index.js"],"names":["UpsertCard","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","data","state","fetch","process","terms","_id","method","headers","body","JSON","stringify","then","toggleForm","refresh","def","onSubmit","this","className","type","placeholder","onChange","React","Component","Card","erase","useState","flip","setFlip","update","setUpdate","onClick","style","color","archived","CreateCard","ActiveCards","getTerms","response","json","deleteCard","id","console","log","filterArchived","filter","term","map","key","archive","Archivedcards","Allcards","displayCards","Routes","to","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fed61ed6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass UpsertCard extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            name: this.props.terms.name,\r\n            def: this.props.terms.def\r\n        }\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const {...data} = this.state\r\n        const api_url = process.env.REACT_APP_API_URL\r\n        fetch(`${api_url}/terms/${this.props.terms._id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body:  JSON.stringify(data)\r\n        }).then(this.props.toggleForm)\r\n          .then(this.props.refresh)\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit} className=\"UpdateCardForm\">\r\n                    <input type=\"text\" name=\"name\" placeholder=\"New Term\" value={this.state.name} onChange={this.handleChange}/>\r\n                    <input type=\"text\" name=\"def\" placeholder=\"Definition\" value={this.state.def} onChange={this.handleChange}/>\r\n                    <input type=\"submit\" value=\"submit\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UpsertCard;","import React, {useState} from 'react';\r\nimport UpsertCard from './UpsertCard';\r\n\r\n\r\nfunction Card ({terms, erase, refresh}) {\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        terms.archived = !terms.archived\r\n        const {_id,...data} = terms\r\n        const api_url = process.env.REACT_APP_API_URL\r\n        fetch(`${api_url}/terms/${terms._id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body:  JSON.stringify(data)\r\n        }).then(refresh)\r\n    }\r\n\r\n\r\n    const [flip, setFlip] = useState(false);\r\n    const [update, setUpdate] = useState(false);\r\n    const toggleForm = () => setUpdate(!update);\r\n        return(\r\n        <div>  \r\n        <div  className={`card ${flip ? 'flip': ''}`} onClick={() => setFlip(!flip)}>\r\n            <div className=\"front\">\r\n                {terms.name}\r\n            </div>\r\n            <p className=\"back\">\r\n                {terms.def}\r\n            </p>\r\n        </div>\r\n        <div className='options'>\r\n            <button className=\"delbtn\" style={{color:\"red\"}} onClick={() => erase(terms._id, refresh)} >X</button>\r\n            <button className=\"updatebtn\" onClick={toggleForm} >Update</button>\r\n            {update ?<UpsertCard terms={terms} toggleForm={toggleForm} refresh={refresh}/>: \"\"} \r\n            <button className=\"archivebtn\" onClick={handleSubmit}>{terms.archived ? 'Unarchive': 'Archive'}</button>\r\n            </div>\r\n        </div>  \r\n        )\r\n    \r\n}\r\n\r\nexport default Card;\r\n\r\n\r\n","import React from 'react';\r\n\r\nclass CreateCard extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            name: \"\",\r\n            def: \"\",\r\n            archived: \"\"\r\n        }\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const {...data} = this.state\r\n        const api_url = process.env.REACT_APP_API_URL\r\n        fetch(`${api_url}/terms`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body:  JSON.stringify(data)\r\n        }).then(() => this.setState({name: \"\", def: \"\"}))\r\n          .then(this.props.refresh)\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit} className=\"CreateCardForm\">\r\n                    <input type=\"text\" name=\"name\" placeholder=\"New Term\" value={this.state.name} onChange={this.handleChange}/>\r\n                    <input type=\"text\" name=\"def\" placeholder=\"Definition\" value={this.state.def} onChange={this.handleChange}/>\r\n                    <input type=\"text\" name=\"def\" placeholder=\"Archive|Set to 'true' or 'false'\" value={this.state.archived} onChange={this.handleChange}/>\r\n                    <input type=\"submit\" value=\"submit\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateCard;","import React from 'react'\r\nimport Card from './Card'\r\nimport CreateCard from './CreateCard'\r\n\r\n\r\n\r\n\r\nclass ActiveCards extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            terms: []\r\n        }\r\n    }\r\n        getTerms = () => {\r\n            const api_url = process.env.REACT_APP_API_URL\r\n            fetch(`${api_url}/terms`)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({terms:data}))\r\n        }\r\n\r\n        componentDidMount(){\r\n            this.getTerms();\r\n        }\r\n\r\n        deleteCard = (id, refresh) => {\r\n            const api_url = process.env.REACT_APP_API_URL\r\n            fetch(`${api_url}/terms/${id}`, {\r\n                method: \"DELETE\"\r\n            }).then(response => response.json())\r\n            .then(data => {console.log(data)\r\n                refresh();\r\n            })\r\n        }\r\n\r\n    render(){\r\n            \r\n            const filterArchived = this.state.terms.filter((term) => {\r\n               return term.archived ? null : term\r\n            }).map((terms) => <Card key={terms._id} \r\n            archive={terms.archived} terms={terms} erase={this.deleteCard} refresh={this.getTerms}/> )\r\n        return(\r\n            <div className='container'>\r\n                <div className='create'>\r\n                    <h1 className='Activecardspage'>Active Cards</h1>\r\n                    <h1>Create A Card</h1>\r\n                    <CreateCard className='createinput' refresh={this.getTerms} />\r\n                </div>\r\n                <div className=\"card-grid\">\r\n                      {filterArchived}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ActiveCards;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nclass Archivedcards extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            terms: []\r\n        }\r\n    }\r\n        getTerms = () => {\r\n            const api_url = process.env.REACT_APP_API_URL\r\n            fetch(`${api_url}/terms`)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({terms:data}))\r\n        }\r\n\r\n        componentDidMount(){\r\n            this.getTerms();\r\n        }\r\n\r\n        deleteCard = (id, refresh) => {\r\n            const api_url = process.env.REACT_APP_API_URL\r\n            fetch(`${api_url}/terms/${id}`, {\r\n                method: \"DELETE\"\r\n            }).then(response => response.json())\r\n            .then(data => {console.log(data)\r\n                refresh();\r\n            })\r\n        }\r\n\r\n    render(){\r\n            \r\n            const filterArchived = this.state.terms.filter((term) => {\r\n               return term.archived ? term : null\r\n            }).map((terms) => <Card key={terms._id} \r\n            archive={terms.archived} terms={terms} erase={this.deleteCard} refresh={this.getTerms}/> )\r\n        return(\r\n            <div className='container'>\r\n                <h1 className=\"archivedcardspage\">Archived Cards</h1>\r\n                <div className=\"card-grid\">\r\n                      {filterArchived}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Archivedcards;","import React from 'react';\r\nimport Card from './Card'\r\nimport CreateCard from './CreateCard'\r\n\r\nclass Allcards extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            terms: []\r\n        }\r\n    }\r\n        getTerms = () => {\r\n            const api_url = process.env.REACT_APP_API_URL\r\n            fetch(`${api_url}/terms`)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({terms:data}))\r\n        }\r\n\r\n        componentDidMount(){\r\n            this.getTerms();\r\n        }\r\n\r\n        deleteCard = (id, refresh) => {\r\n            const api_url = process.env.REACT_APP_API_URL\r\n            fetch(`${api_url}/terms/${id}`, {\r\n                method: \"DELETE\"\r\n            }).then(response => response.json())\r\n            .then(data => {console.log(data)\r\n                refresh();\r\n            })\r\n        }\r\n\r\n    render(){\r\n            \r\n            const displayCards = this.state.terms.map((terms) => <Card key={terms._id} \r\n            archive={terms.archived} terms={terms} erase={this.deleteCard} refresh={this.getTerms}/> )\r\n        return(\r\n            <div className='container'>\r\n                <h1 className='allpagetitle'>All Cards</h1>\r\n                <div className='create'>\r\n                    <h1>Create A Card</h1>\r\n                    <CreateCard className='createinput' refresh={this.getTerms} />\r\n                </div>\r\n                <div className=\"card-grid\">\r\n                      {displayCards}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Allcards;","import React from 'react';\r\nimport {BrowserRouter as Router,\r\nSwitch,\r\nRoute,\r\nLink\r\n} from 'react-router-dom'\r\nimport ActiveCards from './ActiveCards'\r\nimport Archivedcards from './Archivedcards'\r\nimport Allcards from './Allcards'\r\n\r\nfunction Routes() {\r\n\r\n    return(\r\n        <Router>\r\n            <nav >\r\n            <div className='header'>\r\n            <h1 className='sitename'>Programming Flash Cards</h1>\r\n                <ul className='navigation'>\r\n                    <li className='navbutton'>\r\n                        <Link to='/'>Active Cards</Link>\r\n                    </li>\r\n                    <li className='navbutton'>\r\n                        <Link to='/Archive'>Archived Cards</Link>\r\n                    </li>\r\n                    <li className='navbutton'>\r\n                        <Link to='/All'>All Cards</Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n                <Switch>\r\n                    <Route exact path='/'>\r\n                        <ActiveCards/>\r\n                    </Route>\r\n                    <Route path ='/Archive'>\r\n                        <Archivedcards/>\r\n                    </Route>\r\n                    <Route path ='/All'>\r\n                        <Allcards/>\r\n                    </Route>\r\n                </Switch>\r\n            </nav>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport Routes from './Routes'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Routes/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}